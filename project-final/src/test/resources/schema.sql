-- This file will be automatically executed by Spring Boot before data.sql

-- Drop tables if they exist
DROP TABLE IF EXISTS USER_ROLE CASCADE;
DROP TABLE IF EXISTS CONTACT CASCADE;
DROP TABLE IF EXISTS MAIL_CASE CASCADE;
DROP SEQUENCE IF EXISTS MAIL_CASE_ID_SEQ;
DROP TABLE IF EXISTS PROFILE CASCADE;
DROP TABLE IF EXISTS TASK_TAG CASCADE;
DROP TABLE IF EXISTS USER_BELONG CASCADE;
DROP SEQUENCE IF EXISTS USER_BELONG_ID_SEQ;
DROP TABLE IF EXISTS ACTIVITY CASCADE;
DROP SEQUENCE IF EXISTS ACTIVITY_ID_SEQ;
DROP TABLE IF EXISTS TASK CASCADE;
DROP SEQUENCE IF EXISTS TASK_ID_SEQ;
DROP TABLE IF EXISTS SPRINT CASCADE;
DROP SEQUENCE IF EXISTS SPRINT_ID_SEQ;
DROP TABLE IF EXISTS PROJECT CASCADE;
DROP SEQUENCE IF EXISTS PROJECT_ID_SEQ;
DROP TABLE IF EXISTS REFERENCE CASCADE;
DROP SEQUENCE IF EXISTS REFERENCE_ID_SEQ;
DROP TABLE IF EXISTS ATTACHMENT CASCADE;
DROP SEQUENCE IF EXISTS ATTACHMENT_ID_SEQ;
DROP TABLE IF EXISTS USERS CASCADE;
DROP SEQUENCE IF EXISTS USERS_ID_SEQ;

-- Create tables
CREATE TABLE PROJECT
(
    ID          BIGINT PRIMARY KEY,
    CODE        VARCHAR(32)   NOT NULL CONSTRAINT UK_PROJECT_CODE UNIQUE,
    TITLE       VARCHAR(1024) NOT NULL,
    DESCRIPTION VARCHAR(4096) NOT NULL,
    TYPE_CODE   VARCHAR(32)   NOT NULL,
    STARTPOINT  TIMESTAMP,
    ENDPOINT    TIMESTAMP,
    PARENT_ID   BIGINT,
    CONSTRAINT FK_PROJECT_PARENT FOREIGN KEY (PARENT_ID) REFERENCES PROJECT (ID) ON DELETE CASCADE
);

CREATE TABLE USERS
(
    ID            BIGINT PRIMARY KEY,
    DISPLAY_NAME  VARCHAR(32)  NOT NULL,
    EMAIL         VARCHAR(128) NOT NULL CONSTRAINT UK_USERS_EMAIL UNIQUE,
    FIRST_NAME    VARCHAR(32)  NOT NULL,
    LAST_NAME     VARCHAR(32)  NOT NULL,
    PASSWORD      VARCHAR(128) NOT NULL,
    ENDPOINT      TIMESTAMP,
    LAST_UPDATED  TIMESTAMP,
    CREATED_DATE  TIMESTAMP,
    CREATED_BY    VARCHAR(128),
    LAST_MODIFIED_BY VARCHAR(128),
    VERSION       BIGINT       NOT NULL DEFAULT 0
);

CREATE TABLE PROFILE
(
    ID                   BIGINT PRIMARY KEY,
    LAST_LOGIN           TIMESTAMP,
    LAST_FAILED_LOGIN    TIMESTAMP,
    MAIL_NOTIFICATIONS   BIGINT,
    CONSTRAINT FK_PROFILE_USERS FOREIGN KEY (ID) REFERENCES USERS (ID) ON DELETE CASCADE
);

CREATE TABLE CONTACT
(
    ID     BIGINT       NOT NULL,
    CODE   VARCHAR(32)  NOT NULL,
    "VALUE"  VARCHAR(256) NOT NULL,
    PRIMARY KEY (ID, CODE),
    CONSTRAINT FK_CONTACT_PROFILE FOREIGN KEY (ID) REFERENCES PROFILE (ID) ON DELETE CASCADE
);

CREATE TABLE SPRINT
(
    ID             BIGINT PRIMARY KEY,
    STATUS_CODE    VARCHAR(32)   NOT NULL,
    START_POINT   TIMESTAMP,
    END_POINT     TIMESTAMP,
    TITLE         VARCHAR(1024)  NOT NULL,
    PROJECT_ID    BIGINT         NOT NULL,
    CONSTRAINT FK_SPRINT_PROJECT FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (ID) ON DELETE CASCADE
);

CREATE TABLE TASK
(
    ID              BIGINT PRIMARY KEY,
    TITLE           VARCHAR(1024) NOT NULL,
    DESCRIPTION     TEXT,
    TYPE_CODE       VARCHAR(32)   NOT NULL,
    STATUS_CODE     VARCHAR(32)   NOT NULL,
    PRIORITY_CODE   VARCHAR(32)   NOT NULL,
    ESTIMATE        INT,
    UPDATED         TIMESTAMP,
    PROJECT_ID      BIGINT        NOT NULL,
    SPRINT_ID       BIGINT,
    PARENT_ID       BIGINT,
    STARTPOINT      TIMESTAMP,
    CONSTRAINT FK_TASK_PROJECT FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (ID) ON DELETE CASCADE,
    CONSTRAINT FK_TASK_SPRINT FOREIGN KEY (SPRINT_ID) REFERENCES SPRINT (ID) ON DELETE SET NULL,
    CONSTRAINT FK_TASK_PARENT_TASK FOREIGN KEY (PARENT_ID) REFERENCES TASK (ID) ON DELETE CASCADE
);

CREATE TABLE ACTIVITY
(
    ID              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    AUTHOR_ID       BIGINT NOT NULL,
    TASK_ID         BIGINT NOT NULL,
    UPDATED         TIMESTAMP,
    COMMENT         VARCHAR(4096),
    TITLE           VARCHAR(1024),
    DESCRIPTION     VARCHAR(4096),
    ESTIMATE        INT,
    TYPE_CODE       VARCHAR(32),
    STATUS_CODE     VARCHAR(32),
    PRIORITY_CODE   VARCHAR(32),
    CONSTRAINT FK_ACTIVITY_USERS FOREIGN KEY (AUTHOR_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    CONSTRAINT FK_ACTIVITY_TASK FOREIGN KEY (TASK_ID) REFERENCES TASK (ID) ON DELETE CASCADE
);

CREATE TABLE TASK_TAG
(
    TASK_ID BIGINT      NOT NULL,
    TAG     VARCHAR(32) NOT NULL,
    CONSTRAINT PK_TASK_TAG PRIMARY KEY (TASK_ID, TAG),
    CONSTRAINT FK_TASK_TAG FOREIGN KEY (TASK_ID) REFERENCES TASK (ID) ON DELETE CASCADE
);

-- Add missing USER_BELONG table required by tests
CREATE TABLE USER_BELONG
(
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    OBJECT_ID      BIGINT      NOT NULL,
    OBJECT_TYPE    SMALLINT    NOT NULL,
    USER_ID        BIGINT      NOT NULL,
    USER_TYPE_CODE VARCHAR(32) NOT NULL,
    STARTPOINT     TIMESTAMP,
    ENDPOINT       TIMESTAMP,
    CONSTRAINT FK_USER_BELONG FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE
);
CREATE UNIQUE INDEX UK_USER_BELONG ON USER_BELONG (OBJECT_ID, OBJECT_TYPE, USER_ID, USER_TYPE_CODE);
CREATE INDEX IX_USER_BELONG_USER_ID ON USER_BELONG (USER_ID);

CREATE TABLE USER_ROLE
(
    USER_ID BIGINT NOT NULL,
    ROLE    SMALLINT NOT NULL,
    CONSTRAINT PK_USER_ROLE PRIMARY KEY (USER_ID, ROLE),
    CONSTRAINT FK_USER_ROLE_USERS FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE
);

-- Create REFERENCE table
CREATE TABLE REFERENCE
(
    ID         BIGINT PRIMARY KEY,
    CODE       VARCHAR(32)  NOT NULL,
    REF_TYPE   SMALLINT     NOT NULL,
    AUX        VARCHAR(32),
    TITLE      VARCHAR(1024) NOT NULL,
    STARTPOINT TIMESTAMP,
    ENDPOINT   TIMESTAMP,
    CONSTRAINT UK_REFERENCE_CODE_TYPE UNIQUE (CODE, REF_TYPE)
);

-- Create sequences with H2 compatible syntax
CREATE SEQUENCE PROJECT_ID_SEQ;
CREATE SEQUENCE SPRINT_ID_SEQ;
CREATE SEQUENCE TASK_ID_SEQ;
CREATE SEQUENCE ACTIVITY_ID_SEQ;
CREATE SEQUENCE USERS_ID_SEQ;
CREATE SEQUENCE MAIL_CASE_ID_SEQ;
CREATE SEQUENCE USER_BELONG_ID_SEQ;
